-----------------------------------2------------------------------------------
#Python program to find the sum and average of natural numbers up to n where n is provided by user
num = int(input("Enter the number of terms: "))
num1 = num
if num < 0:
     print("Please enter a positive number")
else:
    sum = 0
    while(num > 0):
        sum += num
        num -= 1
    print("The sum of first {} natural numbers is:{} ".format(num1,sum))
    print("The average of first {} natural numbers is:{}".format(num1,sum/num1))

#Python program to find factorial, and Fibonacci of a number, received by user, with iterative as well as recursive process
#To find the factorial of a number(Iterative method)
def fact_iter(n):
    f=1
    i=1
    while(i<=n):
        f=f*i
        i=i+1
    return f


n=int(input("Enter the number:"))
if(n<0):
    print("Invalid input")
elif(n==0):
    print("Factorial of 0 is 1")
else:
    f=fact_iter(n)
    print("Factorial of {} is: {}".format(n,f))

#To find the factorial of a number(Recursive method)
def fact_rec(n):
    if(n==0 or n==1):
        return 1;
    else:
        return(n*fact_rec(n-1))
    
n=int(input("Enter the number:"))
if(n<0):
    print("Invaid input")
else:
    f=fact_rec(n)
    print("Factorial of {} is: {}".format(n,f))

#To genearte N terms of fibonacci series(Iterative method)
def Fibonacci_itr():
    nterms = int(input("Enter the number of terms:"))
    # first two terms
    n1 = 0
    n2 = 1
    count = 0
    # check if the number of terms is valid
    if nterms <= 0:
        print("Please enter a positive integer")
    elif nterms == 1:
        print("Fibonacci sequence upto",nterms,":")
        print(n1)
    else:
        print("Fibonacci sequence upto",nterms,":")
    while count < nterms:
        print(n1,end=' , ')
        nth = n1 + n2
        # update values
        n1 = n2
        n2 = nth
        count += 1

print(Fibonacci_itr())

#To genearte N terms of fibonacci series(Recursive method)
def Fibonacci_rec(q):
    if q == 1:
        return 0
    elif q == 2:
        return 1
    else:
        return Fibonacci_rec(q-1) + Fibonacci_rec(q-2)

m = int(input("Enter the number of terms: "))
for Num in range(1, m+1):
           print(Fibonacci_rec(Num),end=' ')

-----------------------------------------------3--------------------------------------



Lab Program 03
Write python programs
a. To print all prime numbers between N and M.
b. To find largest among three numbers, input by user.
c. To find GCD for two numbers, input by user.

#Method1
num = int(input("Enter a number: "))  
if num > 1:  
    for i in range(2,num):  
        if (num % i) == 0:  
            print(num,"is not a prime number")  
            print(i,"times",num//i,"is",num)  
            break  
    else: 
        print(num,"is a prime number")  
else:  
       print(num,"is not a prime number")  



#Method2
num = int(input('Enter the number'))
if num > 1:
    for i in range(2, (num//2)+1):
        if (num % i) == 0:
            print(num, "is not a prime number")
            print(i,"times",num//i,"is",num)
            break
    else:
         print(num, "is a prime number")
else:
    print(num, "is not a prime number")



#Method3
import math

num = int(input("Enter a number: "))  

if num > 1:  
    for i in range(2,math.floor(math.sqrt(num))):  
        if (num % i) == 0:  
            print(num,"is not a prime number")  
            print(i,"times",num//i,"is",num)  
            break  
    else:  
        print(num,"is a prime number")  
else:  
       print(num,"is not a prime number")




lower = int(input("Enter lower range: "))
upper = int(input("Enter upper range: "))

print("Prime numbers between",lower,"and",upper,"are: ")
for num in range(lower,upper + 1):
    if num > 1:
        for i in range(2, (num//2)+1):
            if((num % i) == 0):
                break
        else:
            print(num,end=',')
            




lower = int(input("Enter lower range: "))
upper = int(input("Enter upper range: "))

print("Prime numbers between",lower,"and",upper,"are: ")
for num in range(lower,upper + 1):
    if num > 1:
        for i in range(2, num):
            if((num % i) == 0):
                break
        else:
            print(num,end=',')
    






#Prime nubers upto n
n = int(input("Enter limit: "))

print("Prime numbers upto",n,"are: ")
for num in range(2, n + 1):
    if num > 1:
        for i in range(2, (num//2)+1):
            if((num % i) == 0):
                break
        else:
            print(num,end=',')




def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)
    
a=int(input("Enter first number:"))
b=int(input("Enter second number:"))
GCD=gcd(a,b)
print("GCD of {} and {} is:{}".format(a,b,GCD))

Enter first number:10
Enter second number:25
GCD of 10 and 25 is:5

def gcd(a,b):
    while(a!=b):
        if(a>b):
            a=a-b
        else:
            b=b-a
    return a

a=int(input("Enter first number:"))
b=int(input("Enter second number:"))
g=gcd(a,b)
print("GCD of {} and {} is:{}".format(a,b,g))

Enter first number:5
Enter second number:6
GCD of 5 and 6 is:1

a=int(input("Enter the first number:"))
b=int(input("Enter the second number:"))
c=int(input("Enter the third number:"))
large=a
if(b>large):
    large=b
if(c>large):
    large=c
print("Largest of {},{} and {} is:{}".format(a,b,c,large))
    

Enter the first number:98
Enter the second number:56
Enter the third number:87
Largest of 98,56 and 87 is:98

a=int(input("Enter the first number:"))
b=int(input("Enter the second number:"))
c=int(input("Enter the third number:"))
if(a>b):
    large=a
else:
    large=b
    
if(c>large):
    large=c
print("Largest of {},{} and {} is:{}".format(a,b,c,large)) 

Enter the first number:56
Enter the second number:78
Enter the third number:6
Largest of 56,78 and 6 is:78

a=int(input("Enter the first number:"))
b=int(input("Enter the second number:"))
c=int(input("Enter the third number:"))

if (a > b) and (a > c):
    large = a
elif (b > a) and (b > c):
    large = b
else:
    large = c

print("Largest of {},{} and {} is:{}".format(a,b,c,large)) 

---------------------------------------------4-------------------------------------------------------------------



4.Write python program to elaborate strings such as

a.String declaration, traversing, slicing, concatenating, and sorting in a list.

# all of the following are equivalent
my_string = 'Hello'
print(my_string)

my_string = "Hello"
print(my_string)

my_string = '''Hello'''
print(my_string)

# triple quotes string can extend multiple lines
my_string = """Hello, welcome to
           the world of Python"""
print(my_string)

Hello
Hello
Hello
Hello, welcome to
           the world of Python

str = 'Python programing'
print('str = ', str)

#first character
print('str[0] = ', str[0])

#last character
print('str[-1] = ', str[-1])

#slicing 2nd to 5th character
print('str[1:5] = ', str[1:5])

#slicing 6th to 2nd last character
print('str[5:-2] = ', str[5:-2])

str =  Python programing
str[0] =  P
str[-1] =  g
str[1:5] =  ytho
str[5:-2] =  n programi

str1 = 'Hello'
str2 ='World!'

# using +
print('str1 + str2 = ', str1 + str2)

# using *
print('str1 * 3 =', str1 * 3)

str1 + str2 =  HelloWorld!
str1 * 3 = HelloHelloHello

a = ("b", "g", "a", "d", "f", "c", "h", "e")
print(a)
x = sorted(a)
print(x)

('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

a = ("b", "g", "a", "d", "f", "c", "h", "e")
print(a)
x = sorted(a,reverse=True)
print(x)

('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')
['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']

str="def abcd"
print(str)
print(len(str))

x=sorted(str)
print(x)

x=sorted(str,reverse=True)
print(x)

def abcd
8
[' ', 'a', 'b', 'c', 'd', 'd', 'e', 'f']
['f', 'e', 'd', 'd', 'c', 'b', 'a', ' ']

str=("def" "abc")
s=sorted(str)
print(s)

['a', 'b', 'c', 'd', 'e', 'f']

my_str = "data science Data Science"

# To take input from the user
#my_str = input("Enter a string: ")

# breakdown the string into a list of words
words = my_str.split()
print(words)
# sort the list
words.sort()

# display the sorted words

print("The sorted words are:")
for word in words:
    print(word)

['data', 'science', 'Data', 'Science']
The sorted words are:
Data
Science
data
science

my_str = "data science Data Science"
my_str=my_str.casefold()
# To take input from the user
#my_str = input("Enter a string: ")

# breakdown the string into a list of words
words = my_str.split()

# sort the list
words.sort()

# display the sorted words

print("The sorted words are:")
for word in words:
    print(word)

The sorted words are:
data
data
science
science

#sort(): It is used to sort the elements in a list.
#It is a destructive process that sort the original list in place.
#By default, the list is sorted in ascending order. 
#If you want to sort in descending order, set the parameter reverse to True.

a=[5,4,2,6,1]
print("Before sorting:",a)
print(id(a))
b=a.sort(reverse=True)
print("After sorting:",a)
print(id(a))
print("After sorting:",b)
print(id(b))

Before sorting: [5, 4, 2, 6, 1]
2142706802952
After sorting: [6, 5, 4, 2, 1]
2142706802952
After sorting: None
1650959504

a=[5,4,2,6,1]
print("Before sorting:",a)
a.sort(reverse=True)
print("After sorting:",a)

Before sorting: [5, 4, 2, 6, 1]
After sorting: [6, 5, 4, 2, 1]

#sorted() returns a sorted list. The original list remains unchanged.

a=[5,4,2,6,1]
print("Before sorting:",a)
b=sorted(a)
print("After sorting:",b)
print(id(a))
print(id(b))

Before sorting: [5, 4, 2, 6, 1]
After sorting: [1, 2, 4, 5, 6]
2142706078216
2142706802952

a=[5,4,2,6,1]
b=sorted(a,reverse=True)
print("Before sorting:",a)
print("After sorting:",b)

Before sorting: [5, 4, 2, 6, 1]
After sorting: [6, 5, 4, 2, 1]

my_str=input("Enter the string:")
# make it suitable for caseless comparison
my_str = my_str.casefold()
# reverse the string
rev_str = reversed(my_str)
# check if the string is equal to its reverse
if list(my_str) == list(rev_str):
    print(my_str," is palindrome")
else:
    print(my_str," is not palindrome")

Enter the string:Madam
madam  is palindrome

# define punctuation
punctuations = '''!()`-[]{};:'"\,<>./?@#$%^&*_~'''

# To take input from the user
my_str = input("Enter a string: ")
# remove punctuation from the string
no_punct = ""
for char in my_str:
    if char not in punctuations:
        no_punct = no_punct + char

# display the unpunctuated string
print(no_punct)

Enter a string: ~?Hello! How are you?
Hello How are you

4(b,c)



l=[10,23,4,56,7]

key=int(input("enter number to search : "))
found = False

for i in range(len(l)):
  if l[i]== key:
    found=True
    print("found at index ",i)
    break
if found ==False:
  print("not found")

enter number to search : 5
not found

l=[]
x=int(input("enter size of list : "))
for i in range(x):
  num=int(input("enter the elements : "))
  l.append(num)
key=int(input("enter number to search : "))
found = False

for i in range(len(l)):
  if l[i]== key:
    found=True
    print("found at index ",i)
    break
if found ==False:
  print("not found")

enter size of list : 5
enter the elements : 1
enter the elements : 2
enter the elements : 3
enter the elements : 4
enter the elements : 5
enter number to search : 4
found at index  3

def binary_srch(lst, key):
    low = 0
    high = len(lst) - 1
    
    while low <=high:
        mid = (high + low)/2
        if(key==lst[mid]):
            return mid
        elif(key>lst[mid]):
            low = mid + 1
        else:
            high = mid - 1

lst=[]
n=int(input("Enter size of list:"))
for i in range(n):
    num = int(input("Enter any number: \t"))
    lst.append(num)
key = int(input("\nEnter number to search: "))

index = binary_srch(lst, key)
if index < 0 :
    print('{} was not found.'.format(key))
else:
    print('{} was found at index {}.'.format(key, index))

Enter size of list:4
Enter any number: 	1
Enter any number: 	2
Enter any number: 	3
Enter any number: 	4

Enter number to search: 3
3 was found at index 2.

def bubble_sort(lst):
    n = len(lst)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if lst[j] < lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]

lst=[]
n=int(input("Enter size of list: "))
for i in range(n):
    num = int(input("Enter any number: \t"))
    lst.append(num)

print ("List elements before sorting:\t")
for i in range(len(lst)):
    print (lst[i],end=' ')

bubble_sort(lst)

print("\nList elements after sorting:\t")
for i in range(len(lst)):
    print (lst[i], end=' ')

Enter size of list: 5
Enter any number: 	12
Enter any number: 	4
Enter any number: 	56
Enter any number: 	7
Enter any number: 	8
List elements before sorting:	
12 4 56 7 8 
List elements after sorting:	
56 12 8 7 4 

def selection_sort(lst):
    n=len(lst)-1
    for i in range(0, n - 1):
        smallest = i
        for j in range(i + 1, len(lst)):
            if lst[j] < lst[smallest]:
                smallest = j
        lst[i], lst[smallest] = lst[smallest], lst[i]

lst=[]
n=int(input("Enter size of list:"))
for i in range(n):
    num = int(input("Enter any number: \t"))
    lst.append(num)
    
print ("List elements before sorting:\t")
for i in range(len(lst)):
    print (lst[i],end=' ')

selection_sort(lst)

print("\nList elements after sorting:\t")
for i in range(len(lst)):
    print (lst[i], end=' ')

Enter size of list:5
Enter any number: 	12
Enter any number: 	3
Enter any number: 	45
Enter any number: 	6
Enter any number: 	8
List elements before sorting:	
12 3 45 6 8 
List elements after sorting:	
3 6 8 12 45 

def insertion_sort(lst):
    for i in range(1, len(lst)):
        temp = lst[i]
        j = i - 1
        while (j >= 0 and temp < lst[j]):
            lst[j + 1] = lst[j]
            j=j-1
        lst[j + 1] = temp

lst=[]
n=int(input("Enter size of list: "))
for i in range(n):
    num = int(input("Enter any number: \t"))
    lst.append(num)
    
print ("List elements before sorting:\t")
for i in range(len(lst)):
    print (lst[i],end=' ')

insertion_sort(lst)

print("\nList elements after sorting:\t")
for i in range(len(lst)):
    print (lst[i], end=' ')

Enter size of list: 5
Enter any number: 	12
Enter any number: 	3
Enter any number: 	45
Enter any number: 	6
Enter any number: 	-4
List elements before sorting:	
12 3 45 6 -4 
List elements after sorting:	
-4 3 6 12 45 

def mergeSort(nlist):
    print("Splitting ",nlist)
    if len(nlist)>1:
        mid = len(nlist)//2
        lefthalf = nlist[:mid]
        righthalf = nlist[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)
        i=j=k=0       
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                nlist[k]=lefthalf[i]
                i=i+1
            else:
                nlist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            nlist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            nlist[k]=righthalf[j]
            j=j+1
            k=k+1
    print("Merging ",nlist)

nlist=[]
n=int(input("Enter size of list: "))
for i in range(n):
    num = int(input("Enter any number: "))
    nlist.append(num)
mergeSort(nlist)
print(nlist)



---------------------------------------------5--------------------------------------------------------------




Write Python program a. Implement python script to show the usage of various operators available in python language. b. Write a program to calculate overtime pay of 10 employees. Overtime is paid at the rate of Rs.12.00 per hour for every hour worked above 40 hours. Assume that employee do not work for fractional part of an hour.

#5a
#arithmetic operators
a=int(input('Enter the first number:'))
b=int(input('Enter the second number:'))
sum=a+b
diff=a-b
prod=a*b
div=a/b
rem1=a%b
rem2=-a%b
rem3=a%-b
rem4=-a%-b
exp=a**b
flr=a//b
print('Sum of {} and {} is {} '.format(a,b,sum))
print('Difference of {} and {} is {} '.format(a,b,diff))
print('Product of {} and {} is {} '.format(a,b,prod))
print('Quotient of {} and {} is {} '.format(a,b,div))
print('Remainder of {} and {} is {} '.format(a,b,rem1))
print('Remainder of -{} and {} is {} '.format(a,b,rem2))
print('Remainder of {} and -{} is {} '.format(a,b,rem3))
print('Remainder of -{} and -{} is {} '.format(a,b,rem4))
print('Exponentiation of {} raised to {} is {} '.format(a,b,exp))
print('Floor function of {} and {} is {} '.format(a,b,flr))

Enter the first number:100
Enter the second number:5
Sum of 100 and 5 is 105 
Difference of 100 and 5 is 95 
Product of 100 and 5 is 500 
Quotient of 100 and 5 is 20.0 
Remainder of 100 and 5 is 0 
Remainder of -100 and 5 is 0 
Remainder of 100 and -5 is 0 
Remainder of -100 and -5 is 0 
Exponentiation of 100 raised to 5 is 10000000000 
Floor function of 100 and 5 is 20 

#assignment operators
x=5
print('x=',x)
x+=15
print('x=',x)
x-=5
print('x=',x)
x*=2
print('x=',x)
x/=2
print('x=',x)
x%=2
print('x=',x)
x//=2
print('x=',x)
x**=2
x=10
print('x=',x)
x&=2
print('x=',x)
x|=2
print('x=',x)
x^=1
print('x=',x)
x>>=4
print('x=',x)
x<<=5
print('x=',x)

x= 5
x= 20
x= 15
x= 30
x= 15.0
x= 1.0
x= 0.0
x= 10
x= 2
x= 2
x= 3
x= 0
x= 0

#comparison operator
x=50
y=20
z=30
print(y==z)
print(y!=z)
print(y>z)
print(y<z)
print(y>=z)
print(y<=z)

False
True
False
True
False
True

#logical operators
print(x<100 and x>25)
print(y<30 or y<20)
print(not(z>30))

True
True
True

#identity operators
a=['Hello','World']
b=['Hello','World']
print(a is b)
print(a is not b)

False
True

#membership operators
c='World'
print(c in a)
print('Python' not in b)

True
True

#bitwise operator
print(y&z)
print(y|z)
print(y^z)
print(~z)
print(y<<z)
print(y>>z)

20
30
10
-31
21474836480
0

#5b
rate=12
overtime=0
payoff=0
total=0
for i in range(0,10):
    hours=int(input('Enter the total work hours of employee{}:'.format(i+1)))
    if hours>40:
        overtime=hours-40
        payoff=overtime*rate
        total+=payoff
        print("Overtime payoff of employee {} is {}".format(i+1,payoff))
    else:
        print("Employee {} is not eligible for overtime".format(i+1))
print("Total overtime cost:",total)





--------------------------6----------------------------------------

6a.Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.

#6a Write a Pandas program to create and display a DataFrame from 
#a specified dictionary data which has the index labels.
import pandas as pd
Student_data  = {'Name': ['Sachin', 'Russel', 'Akshar', 'Rohith', 'Mandhana', 'Williams', 'Lara', 'Saurav', 'Chetan', 'Deepthi'],
        'USN': ["18BTR101", "18BTR111", "18BTR121", "18BTR102", "18BTR112", "18BTR132", "18BTR154", "18BTR201", "18BTR212", "18BTR143"],
        'Marks': [90, 93, 92, 83, 92, 94, 91, 94, 92, 96],
        'Program': ['B.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'M.Tech', 'B.Tech', 'M.Tech', 'M.Tech']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df = pd.DataFrame(Student_data,index=labels)
print(df)

       Name       USN  Marks Program
a    Sachin  18BTR101     90  B.Tech
b    Russel  18BTR111     93  M.Tech
c    Akshar  18BTR121     92  B.Tech
d    Rohith  18BTR102     83  M.Tech
e  Mandhana  18BTR112     92  B.Tech
f  Williams  18BTR132     94  M.Tech
g      Lara  18BTR154     91  M.Tech
h    Saurav  18BTR201     94  B.Tech
i    Chetan  18BTR212     92  M.Tech
j   Deepthi  18BTR143     96  M.Tech

#6b. Create a 4X2 integer array and Prints its attributes
import numpy as np

arr1 = np.empty([4,2],dtype=np.int64) 
print("-------------------------------------")
print("Printing Array(empty array)")
print(arr1)
print("-------------------------------------")

-------------------------------------
Printing Array(empty array)
[[4995126780039155539 8030885097616526684]
 [8390339637454599270 6663471955551872879]
 [8319393663061222724 7306080452898607196]
 [6661779807557394546 3544385822439536980]]
-------------------------------------

arr2 = np.zeros([4,2],dtype=np.int64) 
print("Printing Array(zero filled)")
print("-------------------------------------")
print(arr2)
print("-------------------------------------")

Printing Array(zero filled)
-------------------------------------
[[0 0]
 [0 0]
 [0 0]
 [0 0]]
-------------------------------------

arr4 = np.array([[10,20],[30,40],[50,60],[70,80]],dtype=np.int16) 
print("Printing Array")
print("-------------------------------------")
print(arr4)
print("-------------------------------------")

Printing Array
-------------------------------------
[[10 20]
 [30 40]
 [50 60]
 [70 80]]
-------------------------------------

print("Printing Numpy Array Attributes")
print("Array Shape is: ", arr4.shape)
print("Array dimensions are: ", arr4.ndim)
print("Length of each element of array in bytes is: ", arr4.itemsize)
print("Total number of elements: ", arr4.size)

Printing Numpy Array Attributes
Array Shape is:  (4, 2)
Array dimensions are:  2
Length of each element of array in bytes is:  2
Total number of elements:  8

#Create a 4X2 integer array and Prints its attributes
import numpy as np

arr1 = np.empty([4,2],dtype=np.int64) 
print("Printing Array(empty array)")
print(arr1)
print("-------------------------------------")

arr2 = np.zeros([4,2],dtype=np.int64) 
print("Printing Array(zero filled)")
print(arr2)
print("-------------------------------------")

arr3 = np.ones([4,2],dtype=np.int64) 
print("Printing Array(one filled)")
print(arr3)
print("-------------------------------------")

arr4 = np.array([[1,2],[3,4],[5,6],[7,8]],dtype=np.int64) 
print("Printing Array")
print(arr4)
print("-------------------------------------")

print("Printing Numpy Array Attributes")
print("Array Shape is: ", arr4.shape)
print("Array dimensions are: ", arr4.ndim)
print("Length of each element of array in bytes is: ", arr4.itemsize)
print("Total number of elements: ", arr4.size)


#ndarray.ndim will tell you the number of axes, or dimensions, of the array.

#ndarray.size will tell you the total number of elements of the array.
#This is the product of the elements of the array’s shape.

#ndarray.shape will display a tuple of integers that indicate the number of 
#elements stored along each dimension of the array. If, for example, 
#you have a 2-D array with 2 rows and 3 columns, the shape of your array is (2, 3).

Printing Array(empty array)
[[          0           0]
 [          0           0]
 [          0        1756]
 [          0 30064771072]]
-------------------------------------
Printing Array(zero filled)
[[0 0]
 [0 0]
 [0 0]
 [0 0]]
-------------------------------------
Printing Array(one filled)
[[1 1]
 [1 1]
 [1 1]
 [1 1]]
-------------------------------------
Printing Array
[[1 2]
 [3 4]
 [5 6]
 [7 8]]
-------------------------------------
Printing Numpy Array Attributes
Array Shape is:  (4, 2)
Array dimensions are:  2
Length of each element of array in bytes is:  8
Total number of elements:  8

import numpy as np
arr = np.array([[ 1,  2,  3,  4,  5],
                   [ 6,  7,  8,  9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20],
                   [21, 22, 23, 24, 25],
                   [26, 27, 28, 29, 30]])
print("\n Given array is:\n")
print(arr)

 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]

#To get every odd rows 
print(arr[::2])

[[ 1  2  3  4  5]
 [11 12 13 14 15]
 [21 22 23 24 25]]

#To get every even columns 
print(arr[:, 1::2])

[[ 2  4]
 [ 7  9]
 [12 14]
 [17 19]
 [22 24]
 [27 29]]

print("\n Given array is:\n")
print(arr)

print("\n Printing array of odd rows and even columns")
print(arr[::2, 1::2])

 Given array is:

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]]

 Printing array of odd rows and even columns
[[ 2  4]
 [12 14]
 [22 24]]

print(arr[2,:])

[11 12 13 14 15]

#6d
#Add the following two NumPy arrays and Modify a result array by calculating the square of each element
a = np.array([[1,2,3], [4,5,6],[7,8,9]])
b = np.array([[1,2,3], [4,5,6],[7,8,9]])
print(a)
print(b)

c= a + b
print("Addition of two arrays is(using +) \n")
print(c)

d=np.add(a,b)
print("\nAddition of two arrays is(using add()) \n")
print(d)


s=np.sqrt(d)
print("\nSquare root of each element of matrix \n")
print(s)

-------------------------------7--------------------------
a

import pandas as pd
import matplotlib.pyplot as plt  

df = pd.read_csv("company_sales_data.csv")
profitList = df ['total_profit'].tolist()
monthList  = df ['month_number'].tolist()
print(profitList)
print(monthList)
plt.plot(monthList, profitList)
plt.xlabel('Month number')
plt.ylabel('Profit')
plt.xticks(monthList)
plt.title('Company profit per month')
plt.yticks([100000, 200000, 300000, 400000, 500000])
#plt.show()


b


import pandas as pd
import matplotlib.pyplot as plt  

df = pd.read_csv("company_sales_data.csv")
profitList = df ['total_profit'].tolist()
monthList  = df ['month_number'].tolist()

plt.plot(monthList, profitList, label = 'Profit data of last year', 
      color='r', marker='o', markerfacecolor='k', 
      linestyle='--', linewidth=3)
      
plt.xlabel('Month Number')
plt.ylabel('Profit')
plt.legend(loc='lower right')
plt.title('Company Sales data of last year')
plt.xticks(monthList)
plt.yticks([100000, 200000, 300000, 400000, 500000])
plt.show()

-----------------------------------------------8----------------------------------
a


import matplotlib.pyplot as plt
rect=plt.Rectangle((0,0),200,200,fc='r')
plt.gca().add_patch(rect)

rect=plt.Rectangle((50,50),100,100,fc='w')
plt.gca().add_patch(rect)

rect=plt.Rectangle((75,75),50,50,fc='r')
plt.gca().add_patch(rect)

plt.axis('scaled')
plt.show()
#plt.figure()




b

plt.figure()
plt.axis([0,25,25,0])
curr=plt.gca()
for i in range(0,5):
    for j in range(0,5):
        if((i+j)%2==0):
            curr.add_patch(plt.Rectangle((i*5,j*5),5,5,color='white'))
        else:
            curr.add_patch(plt.Rectangle((i*5,j*5),5,5,color='black'))
plt.show()

-----------------------------------------------------9----------------------------------------------------------------------------------
Experiment - 9. Raspberry Pi
a) Introduction to Raspberry Pi board.
b) Setting up Python on Raspberry Pi board.
c) Running Python from a file.
d) Printing Hello world from file.
Procedure:
a)
b) The easiest introduction to Python is through Thonny, a Python 3 development environment. You can open Thonny from the desktop or applications menu.
c) Python files in Thonny
To create a Python file in Thonny, click File > New and you’ll be given a window. This is an empty file, not a Python prompt. You write a Python file in this window, save it, then run it and you’ll see the output in the other window.
Then save this file (File > Save or Ctrl + S) and run (Run > Run Module or hit F5) and you’ll see the output in your original Python window.
d) Hello world in Python:
print("Hello world")


-----------------------------------------------------10-------------------------------------------------------------
Experiment – 10: Digital Input and Output
a) Interface Tactile button to Raspberry Pi board using Python
b) Blink LED on and Off
c) Sound Buzzer
d) Connecting PIR Motion Sensor to Raspberry Pi Board
Procedure:
a)
Python Code:
import RPi.GPIO as GPIO
import time
button = 16
led = 18
def setup():
GPIO.setmode(GPIO.BOARD)
GPIO.setup(button, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(led, GPIO.OUT)
def loop():
while True:
button_state = GPIO.input(button)
if button_state == False:
GPIO.output(led, True)
print('Button Pressed...')
while GPIO.input(button) == False:
time.sleep(0.2)
else:
GPIO.output(led, False)
def endprogram():
GPIO.output(led, False)
GPIO.cleanup()
if __name__ == '__main__':
setup()
try:
loop()
except KeyboardInterrupt:
print 'keyboard interrupt detected'
endprogram()
Working:
The working of Raspberry Pi Push Button interface is very easy to understand. When the Python script is run, the Raspberry Pi initializes the Button Pin as input with internal pull-up and LED Pin as output.
Now, it waits for a change in state of the Input pin, which happens only when the button is pressed. If the button is pushed, Raspberry Pi will detect a LOW on the corresponding pin and activates the LED.








b) Blink LED on and Off
Run the following commands in Terminal sudo apt-get update
sudo apt-get install python3-pip
sudo pip3 install gpiozero
Run the following code on the Thonny Python IDE in Raspberry Pi:
Program:
from gpiozero import LED #import LED function
from time import sleep #import sleep function
red = LED(27) #assign gpio27 to a variable
while True: #use a ‘while’ loop
red.on() #switch on the led
sleep(2) #wait for 2 seconds
red.off() #switch off the led
sleep(2) #wait for 2 seconds



c) Sound Buzzer






d) Connecting PIR Motion Sensor to Raspberry Pi Board
Procedure:
Components Required:
• Raspberry Pi
• PIR Sensor
• 5V Buzzer
• Connecting Wires
• Mini Breadboard
• Power Supply
Program:
import RPi.GPIO as GPIO
import time
sensor = 16
buzzer = 18
GPIO.setmode(GPIO.BOARD)
GPIO.setup(sensor,GPIO.IN)
GPIO.setup(buzzer,GPIO.OUT)
GPIO.output(buzzer,False)
print "Initialzing PIR Sensor......"
time.sleep(12)
print "PIR Ready..."
print " "
try:
while True:
if GPIO.input(sensor):
GPIO.output(buzzer,True)
print "Motion Detected"
while GPIO.input(sensor):
time.sleep(0.2)
else:
GPIO.output(buzzer,False)
except KeyboardInterrupt:
GPIO.cleanup()






---------------------------------12--------------------------------------
Experiment- 12. Image Recognition
a) Interfacing Camera Module
b) Capture Images
c) Capture Videos
d) Transmission of Data/ Analysis Example




Procedure:
a) Interfacing Camera Module
b) Capture Images
c) Capture Videos




The Python Picamera module is currently not, by default, compatible with the latest version of Raspberry Pi OS (called Bullseye).
To use the Picamera module, you will need to enable legacy support for the camera.
Open a terminal window and type the following command:
sudo raspi-config
Use the cursor keys to scroll down to Interface Options and press the ‘Enter’ key.
Make sure ‘Legacy Camera Enable/disable legacy camera support’ is selected and press the ‘Enter’ key.
Use the cursor keys to select <Yes> and press the ‘Enter’ key
Press ‘Enter’ again to confirm.
Use the cursor keys to select <Finish>
Press ‘Enter’ to reboot.
Go to the main menu and open the Raspberry Pi Configuration tool. Select the Interfaces tab and ensure that the
camera is enabled. Reboot your Raspberry Pi.
Open a terminal window by clicking the black monitor icon in the taskbar.
Type in the following command to take a still picture and save it to the Desktop:
raspistill -o Desktop/image.jpg
add -h and -w to change the height and width of the image:
raspistill -o Desktop/image-small.jpg -w 640 -h 480
Now record a video with the Camera Module by using the following raspivid command:
raspivid -o Desktop/video.h264
In order to play the video file, double-click the video.h264 file icon on the Desktop to open it in VLC Media Player.
How to control the Camera Module with Python code
Open a Python 3 editor, such as Thonny Python IDE:
Open a new file and save it as captureimage.py
Enter the following code for Capturing Images:




from picamera import PiCamera
from time import sleep
camera = PiCamera()
camera.start_preview()
sleep(5)
camera.capture('/home/pi/Desktop/image.jpg')
camera.stop_preview()
Open a new file and save it as capturevideos.py
Enter the following code for Capturing Videos:
from picamera import PiCamera
from time import sleep
camera = PiCamera()
camera.start_preview()
camera.start_recording('/home/pi/Desktop/video.h264')
sleep(5)
camera.stop_recording()
camera.stop_preview()
d) Transmission of Data/ Analysis Example
Step-1: Connect your PIR sensor to GPIO 4
Step-2: Connect a Raspberry Pi Camera Module.
Python Program:
from gpiozero import MotionSensor
from picamera import Picamera
from datetime import datetime
pir = MotionSensor(4)
camera = PiCamera()
filename = "intruder.h264"
while True:
filename = "{0:%Y}-{0:%m}-{0:%d}".format(now)
pir.wait_for_motion()
print("Motion detected!")
camera.start_recording(filename)
pir.wait_for_no_motion()
camera.stop_recording()





